After:
  let g:dora_last_dir_opened = '.'
================================================================================
Execute (A basic test):
  AssertEqual 2, 2
  
================================================================================
Execute (Put our directory in a buffer):
  call dora#ls('./test/fake-filesystem')

Expect (A buffer with our fake filesystem in it):

  test/fake-filesystem/afile.php
  test/fake-filesystem/heres-another.ts
  test/fake-filesystem/maybe/

================================================================================
Execute (Test filepaths are correctly recognised as directories):
  let expected = 1
  let actual = dora#is_directory('my/directory/')
  AssertEqual expected, actual

================================================================================
Execute (Test filepaths are correctly recognised as files):
  let expected = 0
  let actual = dora#is_directory('my/directory/aplace/file.php')
  AssertEqual expected, actual

================================================================================
Given dora (Test the g:dora_last_dir_opened variable is set when we open a directory):
  ./non-existent-file
  ./and-another
  ./test/fake-filesystem/maybe

Do:
  G\<cr>

Then:
  let expected = 'test/fake-filesystem/maybe'
  AssertEqual expected, g:dora_last_dir_opened

================================================================================
Given dora (Test the g:dora_last_dir_opened is only set on valid directories):
  ./non-existent-file
  ./and-another
  ./test/fake-filesystem/not-valid

Do:
  G\<cr>

Then:
  let expected = '.'
  AssertEqual expected, g:dora_last_dir_opened

================================================================================
Execute (Test our cursor position is at the top when we create a dora buffer):
  call dora#ls('./test/fake-filesystem')
  let expected = 1
  let actual = line('.')
  AssertEqual expected, actual

================================================================================
Given dora (Test a dora buffer has a fixed width):
  ./some-file

Execute:
  let expected = 1
  let actual = &winfixwidth

  AssertEqual expected, actual

================================================================================
Given dora (Test going into a directory with <cr>):
  ./non-existent-file
  ./and-another
  ./test/fake-filesystem/maybe

Do:
  G\<cr>

Expect:

  test/fake-filesystem/maybe/placeholder

================================================================================
Given dora (Test going back a directory with < is correct):
  ./non-existent-file
  ./and-another
  ./test/fake-filesystem/maybe

Do:
  G\<cr><

Expect:

  test/fake-filesystem/afile.php
  test/fake-filesystem/heres-another.ts
  test/fake-filesystem/maybe/
